
package dropincoming;

import java.awt.AWTException;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Calendar;
import java.util.TimeZone;
import java.util.prefs.Preferences;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * provide idead panel for taking screenshots.
 * @author jbf
 */
public class ScreenShotPanel extends javax.swing.JPanel {

    BufferedImage screenShot;
    int oldh= -1;
    int oldw= -1;
    double scale=1;
    
    public static String PREF_SCREENSHOT_FILENAME_TEMPLATE= "screenshotFilenameTemplate";
    public static String PREF_SCREENSHOT_DIRECTORY="screenshotDirectory";
    

    /**
     * Creates new form ScreenShotPanel
     */
    public ScreenShotPanel() {
        initComponents();
        
    }

    @Override
    protected void paintComponent(Graphics g) {
        if ( oldh!=imageLabel.getHeight() || oldw!=imageLabel.getWidth() ) {
            updateImage();
        } 
        super.paintComponent(g); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * convert URI_Template strings like $Y$m$d to String.format templates
     * like %1$tY%1$tm%1$td.
     * @param uriTemplate
     * @return 
     */
    private static String toJavaStringFormat( String uriTemplate ) {
        String[] ss= uriTemplate.split("\\$");
        StringBuilder b= new StringBuilder();
        b.append(ss[0]);
        for ( int i=1; i<ss.length; i++ ) {
            b.append("%1$t").append(ss[i]);
        }
        return b.toString();
    }
    
    private Preferences getPreferences() {
        return Preferences.userNodeForPackage( ScreenShotPanel.class );
    }
    
    public void takeScreenshot() {
        try {
            Robot robot = new Robot();
            Toolkit t = Toolkit.getDefaultToolkit();
            Dimension d = t.getScreenSize();
            int x = 0;
            int y = 0;
            int width = (int) d.getWidth();
            int height = (int) d.getHeight();
            Rectangle rect = new Rectangle(x, y, width, height);
            screenShot = robot.createScreenCapture(rect);

            Preferences prefs= getPreferences();
            
            String dir=  prefs.get( PREF_SCREENSHOT_DIRECTORY, System.getProperty("user.dir") );
            
            String template= prefs.get( PREF_SCREENSHOT_FILENAME_TEMPLATE, "$Y$m$d_$H$M$S.png" );
            String jtemplate= toJavaStringFormat( template );
            
            TimeZone timeZone = TimeZone.getTimeZone("GMT");
            Calendar calendar = Calendar.getInstance(timeZone);
            
            String fileName = String.format( jtemplate, calendar );
            
            File outf= new File(dir,fileName);
            
            filenameLabel.setText( outf.toString() );
            
            updateImage();
            
        } catch (AWTException ex) {
            
            filenameLabel.setText("unable to capture screenshot");
            
        }


    }

    private void updateImage() {
        int w= imageLabel.getWidth();
        int h= imageLabel.getHeight();
        oldw= w;
        oldh= h;
        double aspect= screenShot.getWidth() / (double)screenShot.getHeight();
        if ( w==0 || h==0 ) return;
        if ( h < w/aspect ) {
            w= (int)(h*aspect);
        } else if ( w>h*aspect ) {
            h= (int)(w/aspect);
        }
        scale= screenShot.getWidth() / w;
        Image im= screenShot.getScaledInstance( w, h, Image.SCALE_AREA_AVERAGING );
        imageLabel.setIcon( new ImageIcon( im ));
        
    }
    
    public void writeScreenshot() throws IOException {
        String fileName = filenameLabel.getText();
        File file= new File(fileName);
        
        String directory= file.getParent();
        
        getPreferences().put( PREF_SCREENSHOT_DIRECTORY, directory );
        
        // Print the file name
        System.out.println("File name: " + fileName);
        ImageIO.write(screenShot, "png", file );

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filenameLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        imageLabel = new javax.swing.JLabel();

        filenameLabel.setText("jLabel1");

        jButton1.setText("pick...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        imageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filenameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 248, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filenameLabel)
                    .addComponent(jButton1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        File oldFile= new File(filenameLabel.getText());
        JFileChooser chooser= new JFileChooser( oldFile );
        chooser.setFileSelectionMode( JFileChooser.FILES_AND_DIRECTORIES );
        chooser.setFileFilter( new FileNameExtensionFilter("png files", "png", "PNG") );
        int o= chooser.showSaveDialog(this);
        if ( o==JFileChooser.APPROVE_OPTION ) {
            if ( chooser.getSelectedFile().isDirectory() ) {
                filenameLabel.setText( new File( chooser.getSelectedFile(), oldFile.getName() ).toString() );
            } else {
                filenameLabel.setText( chooser.getSelectedFile().toString() );
            }
            getPreferences().put( PREF_SCREENSHOT_DIRECTORY, new File(filenameLabel.getText()).getParent() );
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void imageLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLabelMouseClicked
        int x= (int)(evt.getX()*scale);
        int y= (int)(evt.getY()*scale);
        System.err.println( String.format( "%d %d ", x, y ) );
        Rectangle r= getWindowAt( x,y );
        //Rectangle r= null; // WindowUtils doesn't seem to work.
        System.err.println("rect: "+ r);
    }//GEN-LAST:event_imageLabelMouseClicked

    /**
     * This routine will identify the topmost window at this location.  I think
     * the best way to do this will be to spawn a command which will return
     * data in a known formats.  For example, this looks promising on Linux:
     * ~/temp/autoplot/das2java
     * spot9> xdotool search --all --name '.*' | xdotool getactivewindow getwindowgeometry
     * Window 115343366
     * Position: 1962,567 (screen: 0)
     * Geometry: 1606x455
     * 
     * or
     * 
     * xdotool mousemove 1001 0 getactivewindow getwindowgeometry --shell mousemove restore

     * @param i the horizontal pixel location on the image (left is 0)
     * @param j the vertical pixel location on the image (top is 0)
     * @return 
     */
    public Rectangle getWindowAt( int i, int j ) {
        try {
            //List<DesktopWindow> ss= WindowUtils.getAllWindows(true);
            //for ( DesktopWindow s: ss ) {
            //    System.err.println( String.format( "%s %s", s.getLocAndSize().toString(), s.getTitle() ) );
            //}
            return null;
        } catch ( Exception e ) {
            System.err.println( "unable to find window.");
            return null;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel filenameLabel;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
